name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - release/*

jobs:
  build:
    env:
      BUILD_CONFIG: "Release"
      SOLUTION: "FlipView.sln"
      PROJECT: "FlipView.csproj"
      BUILD_VERSION: "1.0.0"
      #TEST_PROJECT: "../Test/Test.csproj"

    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./src

    steps:
      - uses: actions/checkout@v2

      - name: Check branch
        run: |
          echo commit message: '${{ github.event.head_commit.message }}'
          echo Branch: '${{ github.ref }}'
          echo Action: '${{ github.event_name }}'

      - name: Check merge commit (only executed if merge is badly formed)
        if: startsWith(github.ref, 'refs/heads/main') && (!contains(github.event.head_commit.message, 'Merge pull request ') || !contains(github.event.head_commit.message,'release/'))
        run: |
          echo INVALID COMMIT RELEASE MESSAGE: '${{ github.event.head_commit.message }}'
          exit 1

      - uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9 # 1.6.0
        if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'Merge pull request ') && contains(github.event.head_commit.message,'release/')
        id: GetBuildVersion # Remember to give an ID if you need the output filename
        name: Download GetBuildVersion.psm1
        with:
          url: "https://raw.githubusercontent.com/Jon2G/GetBuildVersion/refs/heads/main/GetBuildVersion.psm1"
          target: src/
          filename: GetBuildVersion.psm1

      - name: GetBuildVersion.psm1
        if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'Merge pull request ') && contains(github.event.head_commit.message,'release/')
        run: |
          $HEAD_COMMIT = "${{github.event.head_commit.message}}"
          Import-Module .\GetBuildVersion.psm1
          $version = GetBuildVersion -VersionString $HEAD_COMMIT
          echo "BUILD_VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo Version: $version
        shell: pwsh

      - name: Setup NuGet
        if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'Merge pull request ') && contains(github.event.head_commit.message,'release/')
        uses: NuGet/setup-nuget@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Install .NET MAUI
        run: |
          dotnet workload install maui-tizen
          dotnet workload install maui-android

      - name: Restore dependencies
        run: dotnet restore $SOLUTION

      - name: Build project
        run: dotnet build ${{env.PROJECT}} /p:Configuration=${{env.BUILD_CONFIG}} /p:Platform="Any CPU" /p:Version=${{env.BUILD_VERSION}}

      - name: Build solution
        run: dotnet build ${{env.SOLUTION}} /p:Configuration=${{env.BUILD_CONFIG}} /p:Platform="Any CPU" /p:Version=${{env.BUILD_VERSION}}

      #- name: Run unit tests with report
      #  run: dotnet test $TEST_PROJECT --configuration Release --no-build --logger "trx;LogFileName=./../../src/TestResults.trx"

      - name: Show files
        run: ls

      # - name: Upload test results
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: TestResults
      #     path: ./TestResults.trx

      - name: Publish package
        if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'Merge pull request ') && contains(github.event.head_commit.message,'release/')
        run: dotnet nuget push **\*.nupkg --source 'https://api.nuget.org/v3/index.json' --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate

      - name: Publish symbols package
        if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'Merge pull request ') && contains(github.event.head_commit.message,'release/')
        run: dotnet nuget push **\*.snupkg --source 'https://api.nuget.org/v3/index.json' --api-key ${{secrets.NUGET_API_KEY}} --skip-duplicate
